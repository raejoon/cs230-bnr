) %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "counts.txt")), by = "astId") %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "unitTestResults.txt")), by = "astId") %>%
arrange(desc(counts), desc(score)) %>%
select(-file)
trees_4 <-
tibble(
file = list.files(here::here("data-raw", "hoc4", "asts")) %>% str_subset(".json$")
) %>%
mutate(
astId = str_extract(file, "^\\d+") %>% as.numeric(),
tree = file %>% map(parse_ast_4),
steps = map_int(tree, ~ nrow(.))
) %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "counts.txt")), by = "astId") %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "unitTestResults.txt")), by = "astId") %>%
arrange(desc(counts), desc(score)) %>%
select(-file)
traj_4 <- get_traj(here::here("data-raw", "hoc4", "trajectories"))
source("functions.R")
library(jsonlite)
library(magrittr)
source("functions.R")
# problem 4 ---------------------------------------------------------------
trees_4 <-
tibble(
file = list.files(here::here("data-raw", "hoc4", "asts")) %>% str_subset(".json$")
) %>%
mutate(
astId = str_extract(file, "^\\d+") %>% as.numeric(),
tree = file %>% map(parse_ast_4),
steps = map_int(tree, ~ nrow(.))
) %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "counts.txt")), by = "astId") %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "unitTestResults.txt")), by = "astId") %>%
arrange(desc(counts), desc(score)) %>%
select(-file)
library(tidyverse)
library(magrittr)
library(jsonlite)
source("functions.R")
# problem 4 ---------------------------------------------------------------
trees_4 <-
tibble(
file = list.files(here::here("data-raw", "hoc4", "asts")) %>% str_subset(".json$")
) %>%
mutate(
astId = str_extract(file, "^\\d+") %>% as.numeric(),
tree = file %>% map(parse_ast_4),
steps = map_int(tree, ~ nrow(.))
) %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "counts.txt")), by = "astId") %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "unitTestResults.txt")), by = "astId") %>%
arrange(desc(counts), desc(score)) %>%
select(-file)
traj_4
traj_4 <- get_traj(here::here("data-raw", "hoc4", "trajectories"))
traj_4
get_traj <- function(folder_path){
tibble(
trajId = list.files(folder_path) %>% str_subset(".txt$") %>% str_extract("^\\d+") %>% as.numeric()
) %>%
mutate(
astIds = trajId %>% map(~ readLines(paste0(folder_path, "/", ., ".txt"), warn = FALSE))
)
}
traj_4 <- get_traj(here::here("data-raw", "hoc4", "trajectories"))
get_traj <- function(folder_path){
tibble(
trajId = list.files(folder_path) %>% str_subset("^\\d+.txt$") %>% str_extract("^\\d+") %>% as.numeric()
) %>%
mutate(
astIds = trajId %>% map(~ readLines(paste0(folder_path, "/", ., ".txt"), warn = FALSE))
)
}
traj_4 <- get_traj(here::here("data-raw", "hoc4", "trajectories"))
traj_4
# need number of blocks for rows of matrix
num_rows <- map_int(trees_4$tree, nrow) %>% max()
# need all types for columns of matrix
all_types <-
trees_4$tree %>%
map(~ distinct(., type)) %>%
bind_rows() %>%
count(type, sort = TRUE) %>%
mutate(percent_of_trees = n / nrow(trees_4))
num_cols <- nrow(all_types)
# write a function that turns a list into a matrix
t <- trees_4$tree[[1]]
library(tidyverse)
library(magrittr)
library(jsonlite)
source("functions.R")
# problem 4 ---------------------------------------------------------------
trees_4 <-
tibble(
file = list.files(here::here("data-raw", "hoc4", "asts")) %>% str_subset(".json$")
) %>%
mutate(
astId = str_extract(file, "^\\d+") %>% as.numeric(),
tree = file %>% map(parse_ast_4),
steps = map_int(tree, ~ nrow(.))
) %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "counts.txt")), by = "astId") %>%
left_join(read_tsv(here::here("data-raw", "hoc4", "asts", "unitTestResults.txt")), by = "astId") %>%
arrange(desc(counts), desc(score)) %>%
select(-file)
# need number of blocks for rows of matrix
num_rows <- map_int(trees_4$tree, nrow) %>% max()
# need all types for columns of matrix
all_types <-
trees_4$tree %>%
map(~ distinct(., type)) %>%
bind_rows() %>%
count(type, sort = TRUE) %>%
mutate(percent_of_trees = n / nrow(trees_4))
num_cols <- nrow(all_types)
# write a function that turns a list into a matrix
t <- trees_4$tree[[1]]
t
as_factor
?as_factor
as_factor(t$type, levels = c("maze_moveForward", "turnLeft", "turnRight"))
nrow(all_types)
num_rows
t
block_sequence <- c(t$type, rep("blank", num_rows - nrow(t)))
block_sequence
as_factor(t$type, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank"))
as_factor(block_sequence, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank"))
k <- as_factor(block_sequence, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank"))
k <- as_factor(block_sequence, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank")) %>% as.integer()
k
m <- matrix(-1, num_rows, num_cols)
m
num_cols
num_cols <- nrow(all_types) + 1 # add 1 for blank
m <- matrix(-1, num_rows, num_cols)
m
m <- matrix(0, num_rows, num_cols)
mk
m
k
names(k)
length(k)
m[1:num_rows, k] <- 1
m
1:num_rows
k
m
1:num_rows
k
matrix(0, 2, 2)
a <- matrix(0, 2, 2)
a[c(1, 2), c(1, 2)]
m <- matrix(0, num_rows, num_cols) %>% as_tibble()
m
m[1:num_rows, k] <- 1
m
1:num_rows
k
a[c(1, 2), c(1, 2)]
a
a[1, 1]
a[1:2, 1]
a
m <- rep(0, num_rows * num_cols)
m
1:num_rows * k
m[1:num_rows * k] <- 1
m
matrix(m, ncol = num_cols)
matrix(m, ncol = num_cols, byrow = TRUE)
matrix(m, ncol = num_cols, byrow = FALSE)
m <- rep(0, num_rows * num_cols)
m
1:num_rows
k
k
1:num_rows
m[k + 4 * (1:num_rows - 1)] <- 1
matrix(m, ncol = num_cols, byrow = FALSE)
matrix(m, ncol = num_cols, byrow = TRUE)
t$type %>%
c(rep("blank", num_rows - nrow(t)))
t$type %>%
c(rep("blank", num_rows - nrow(t))) %>%
as_factor(block_sequence, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank")) %>%
as_integer()
t$type %>%
c(rep("blank", num_rows - nrow(t))) %>%
as_factor(block_sequence, levels = c("maze_moveForward", "turnLeft", "turnRight", "blank")) %>%
as.integer()
t
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
t$type %>%
c(rep("blank", num_rows - nrow(t))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
t$type %>%
c(rep("blank", num_rows - nrow(t))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
where_one_is_in_each_row <-
t$type %>%
c(rep("blank", num_rows - nrow(t))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector
ast_df_as_vector %>%
as.matrix()
ast_df_as_vector %>%
as.matrix(ncol = num_cols, byrow = TRUE)
ast_df_as_vector %>%
as.matrix(ncol = num_cols, byrow = TRUE)
ast_df_as_vector
num_cols
ast_df_as_vector %>%
as.matrix(ncol = num_cols, byrow = TRUE)
as.matrix(ast_df_as_vector, ncol = num_cols, byrow = TRUE)
matrix(ast_df_as_vector, ncol = num_cols, byrow = TRUE)
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE)
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble()
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble() %>%
set_names(block_names)
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble() %>%
set_names(block_names)
trees_4
trees_4
# save --------------------------------------------------------------------
trees_4 %>% write_rds(here::here("data-created", "trees_4.rds"))
library(tidyverse)
trees_4 <- read_rds(here::here("data-created", "trees_4.rds"))
trees_4
# need number of blocks for rows of matrix
num_rows <- map_int(trees_4$tree, nrow) %>% max()
# need all types for columns of matrix
all_types <-
trees_4$tree %>%
map(~ distinct(., type)) %>%
bind_rows() %>%
count(type, sort = TRUE) %>%
mutate(percent_of_trees = n / nrow(trees_4))
num_cols <- nrow(all_types) + 1 # add 1 for blank
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble() %>%
set_names(block_names)
}
tree[[1]]
trees_4$tree[[1]]
?tribble
tribble(
~move_forward, ~turn_left, ~turn_right, ~blank
1,             0,           0,        0,
0,             0,           0,        0
)
tribble(
~move_forward, ~turn_left, ~turn_right, ~blank,
1,             0,           0,        0,
0,             0,           0,        0
)
tribble(
~move_forward, ~turn_left, ~turn_right, ~blank,
1,             0,           0,        0,
0,             0,           0,        1
)
library(tidyverse)
tribble(
~move_forward, ~turn_left, ~turn_right, ~blank,
1,             0,           0,        0,
0,             0,           0,        1
)
trees_4$tree[[1]]$type
trees_4$tree[[1]]$type %>%
ast_blocks_to_matrix(num_cols, num_rows)
?as_tibble.matrix
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimial") %>%
set_names(block_names)
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimial") %>%
set_names(block_names)
}
trees_4$tree[[1]]$type %>%
ast_blocks_to_matrix(num_cols, num_rows)
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
as_factor(block_sequence, levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimal") %>%
set_names(block_names)
}
trees_4$tree[[1]]$type %>%
ast_blocks_to_matrix(num_cols, num_rows)
trees
trees_4
trees_4$tree[1:10]
trees_4$tree[1:10] %>% map(~ ast_blocks_to_matrix(., num_cols, num_rows))
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
as_factor(levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimal") %>%
set_names(block_names)
}
trees_4$tree[1:10] %>% map(~ ast_blocks_to_matrix(., num_cols, num_rows))
trees_4$tree[1:10]
trees_4
trees_4$tree
trees_4$tree[1:10]
trees_4$tree[1:10] %>%
map(~ .$type)
trees_4$tree[1:10] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows))
trees_4$tree[1:10] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
trees_4$tree[1:10] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows))
trees_4$tree[1:10] %>%
map(~ .$type)
trees_4$tree[[10]]$type %>%
ast_blocks_to_matrix()
trees_4$tree[[10]]$type %>%
ast_blocks_to_matrix(num_cols, num_rows)
blocks <- trees_4$tree[[10]]$type
blocks
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
blocks %>%
c(rep("blank", num_rows - length(blocks)))
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
as_factor(levels = block_names)
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
parse_factor(levels = block_names)
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
parse_factor(levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimal") %>%
set_names(block_names)
}
trees_4$tree[1:10] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
trees_4$tree[1:10] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
?array
trees_4$tree[1:2] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
a <-
trees_4$tree[1:2] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
array(a, dim = c(119, 4, 2))
a
array(a, dim = c(119, 4, 2))
array(c(a[[1]], a[[2]]), dim = c(119, 4, 2))
c(a[[1]], a[[2]])
array(c(a[[1]], a[[2]]), dim = c(119, 4, 2))
c(a[[1]], a[[2]])
unlist(a)
array(unlist(a), dim = c(119, 4, 2))
list_of_ast_matrices <-
trees_4$tree[1:2] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
list_of_ast_matrices %>%
unlist() %>%
array(dim = c(num_rows, num_cols, length(a)))
list_of_ast_matrices <-
trees_4$tree[1:100] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
array_of_ast_matrices <-
list_of_ast_matrices %>%
unlist() %>%
array(dim = c(num_rows, num_cols, length(a)))
array_of_ast_matrices
trees_4
trees_4$tree %>% map_lgl(~ "type" %in% names(.))
trees_4$tree %>% map_lgl(~ "type" %in% names(.)) %>% mean()
trees_4 %>%
filter(tree %>% map_lgl(~ "type" %in% names(.)))
trees_4 %>%
filter(tree %>% map_lgl(~ "type" %in% names(.)))
trees_4
trees_4 <-
read_rds(here::here("data-created", "trees_4.rds")) %>%
filter(tree %>% map_lgl(~ "type" %in% names(.)))
# need number of blocks for rows of matrix
num_rows <- map_int(trees_4$tree, nrow) %>% max()
# need all types for columns of matrix
all_types <-
trees_4$tree %>%
map(~ distinct(., type)) %>%
bind_rows() %>%
count(type, sort = TRUE) %>%
mutate(percent_of_trees = n / nrow(trees_4))
num_cols <- nrow(all_types) + 1 # add 1 for blank
ast_blocks_to_matrix <- function(blocks, num_cols, num_rows){
block_names <- c("maze_moveForward", "turnLeft", "turnRight", "blank")
where_one_is_in_each_row <-
blocks %>%
c(rep("blank", num_rows - length(blocks))) %>%
parse_factor(levels = block_names) %>%
as.integer()
ast_df_as_vector <- rep(0, num_rows * num_cols)
ast_df_as_vector[where_one_is_in_each_row + 4 * (1:num_rows - 1)] <- 1
ast_df_as_vector %>%
matrix(ncol = num_cols, byrow = TRUE) %>%
as_tibble(.name_repair = "minimal") %>%
set_names(block_names)
}
list_of_ast_matrices <-
trees_4$tree[1:100] %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
array_of_ast_matrices <-
list_of_ast_matrices %>%
unlist() %>%
array(dim = c(num_rows, num_cols, length(a)))
array_of_ast_matrices
list_of_ast_matrices
array_of_ast_matrices <-
list_of_ast_matrices %>%
unlist() %>%
array(dim = c(num_rows, num_cols, length(list_of_ast_matrices)))
array_of_ast_matrices
library(reticulate)
py$array_of_ast_matrices <- r_to_py(array_of_ast_matrices)
reticulate::repl_python()
list_of_ast_matrices <-
trees_4$tree %>%
map(~ .$type) %>%
map(~ ast_blocks_to_matrix(., num_cols, num_rows)) %>%
map(as.matrix)
array_of_ast_matrices <-
list_of_ast_matrices %>%
unlist() %>%
array(dim = c(num_rows, num_cols, length(list_of_ast_matrices)))
library(reticulate)
py$array_of_ast_matrices <- r_to_py(array_of_ast_matrices)
reticulate::repl_python()
library(tidyverse)
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
